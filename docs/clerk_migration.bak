# Clerk Migration


## Context
- We need to migrate our current project's Supabase Auth to Clerk Auth
- We need to update all files related to auth (sign up, sign in, sign out, api routes, etc below)
- Only 3 users need to be migrated
- Supabase auth consistently does not give us Google Refresh Tokens, which are needed
- The connections between Clerk and Supabase are set up on both websites already
- We would implment the server-side rendering variant of Clerk + Supabase
- In Supabase, we use the User_Profiles table for user-specific information
- The User_Profiles id column is important and is the primary key of the table and is type uuid
- The User_Profiles id column is currently Foreign key relation to: auth.users, which is Supabase Auth
- The User_Profiles id column should always match the user's Clerk ID to enable us to match up data in the Supabase (e.g. user conversation history) with Clerk
- This project's code is a fork of the Vercel Chat SDK template


### Vercel Chat SDK Docs
- https://github.com/vercel/ai-chatbot
- https://chat-sdk.dev/docs/getting-started/architecture


### Clerk Docs
- https://supabase.com/docs/guides/auth/third-party/clerk
- https://clerk.com/docs/integrations/databases/supabase
- https://clerk.com/docs/quickstarts/nextjs


### Clerk Reference
- NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY is set in .env, .env.local, and on Vercel
- CLERK_SECRET_KEY is set in .env, .env.local, and on Vercel
- Clerk Application ID: app_2bNlU1J6xmKbSnPrmvPmLCQFCwZ
- Clerk Instance ID: ins_2bNlU63JtiiXTTqBz744CicTCoU
- Clerk Frontend API URL: https://optimal-cub-12.accounts.dev/


## Impacted Files (Possibly Incomplete)

Here are the files that seem most relevant to Supabase authentication and would likely need changes to migrate to Clerk:
- components/auth/login-with-google.tsx: Contains the supabase.auth.signInWithOAuth call for Google. This component needs to be replaced or updated to use Clerk's sign-in methods (e.g., <SignInButton /> or clerk.redirectToSignIn()).
- app/(auth)/callback/route.ts: This is the Supabase OAuth callback handler. It uses supabase.auth.exchangeCodeForSession and extracts user/session data. Clerk has its own callback handling mechanism (often handled automatically by its middleware or components), so this route might be entirely replaced or significantly changed depending on your Clerk setup (e.g., using Clerk's Next.js middleware and API routes for session management). The logic for saving refresh tokens and calling the webhook would need to be triggered by Clerk's events instead (perhaps using Clerk webhooks or middleware).
- lib/supabase/middleware.ts & middleware.ts: These files handle session management using Supabase's middleware helpers (@supabase/ssr). You'll replace this with Clerk's middleware (@clerk/nextjs/server's clerkMiddleware) to handle session validation, redirection for logged-out users, etc.
- lib/supabase/client.ts & lib/supabase/server.ts: These setup the Supabase client instances. While you might still need a Supabase client for database operations, the authentication parts integrated here (createServerClient from @supabase/ssr) will be handled by Clerk instead. You might simplify these or remove the auth-specific configurations.
components/sidebar-user-nav.tsx: Uses supabase.auth.signOut() and supabase.auth.getUser() (implicitly via the user prop passed down). This needs to be updated to use Clerk's signOut() function and useUser() hook (or equivalent) to get user data and display user info/avatar.
- components/sign-out-form.tsx: Directly calls supabase.auth.signOut(). Needs to be replaced with Clerk's sign-out mechanism.
- app/(chat)/layout.tsx: Uses supabase.auth.getUser() to fetch the user server-side. This should be replaced with Clerk's server-side authentication methods (like auth() from @clerk/nextjs/server).
components/auth/auth-form.tsx: Also contains a signInWithOAuth call, similar to login-with-google.tsx. Needs updating to Clerk's methods.
components/auth/sign-up-form.tsx, components/auth/forgot-password-form.tsx, components/auth/update-password-form.tsx: These components currently use signInWithOAuth potentially as a fallback or primary method. They need review. If Clerk handles sign-up/password reset flows directly via its components/hosted pages, these might be removed or replaced entirely. If you keep custom forms, they need to integrate with Clerk's API/SDK for these actions.
- app/(auth)/actions.ts: Currently contains placeholder server actions. If you switch to Clerk's pre-built UI or handle auth client-side/via Clerk middleware, these might remain placeholders or be removed. If you build custom forms that call server actions, they would need to interact with the Clerk Backend API here.
- tests/auth.setup.ts: Your Playwright test setup seems to be testing registration. This will need to be updated to reflect the new Clerk authentication flow.

In summary: The core changes involve replacing Supabase client-side signInWithOAuth calls with Clerk's UI components or SDK functions, swapping the Supabase auth middleware for Clerk's middleware, updating how user sessions are retrieved (getUser/getSession), handling sign-out, and adapting the OAuth callback logic.


## Clerk Example Code from their Documentation

### client.ts
```
import { auth } from '@clerk/nextjs/server'
import { createClient } from '@supabase/supabase-js'

export function createServerSupabaseClient() {
  return createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL!,
    process.env.NEXT_PUBLIC_SUPABASE_KEY!,
    {
      async accessToken() {
        return (await auth()).getToken()
      },
    },
  )
}
```

### page.tsx
```
import AddTaskForm from './AddTaskForm'
import { createServerSupabaseClient } from './client'

export default async function Home() {
  // Use the custom Supabase client you created
  const client = createServerSupabaseClient()

  // Query the 'tasks' table to render the list of tasks
  const { data, error } = await client.from('tasks').select()
  if (error) {
    throw error
  }
  const tasks = data

  return (
    <div>
      <h1>Tasks</h1>

      <div>{tasks?.map((task: any) => <p key={task.id}>{task.name}</p>)}</div>

      <AddTaskForm />
    </div>
  )
}
```

### actions.ts
```
'use server'

import { createServerSupabaseClient } from './client'

export async function addTask(name: string) {
  const client = createServerSupabaseClient()

  try {
    const response = await client.from('tasks').insert({
      name,
    })

    console.log('Task successfully added!', response)
  } catch (error: any) {
    console.error('Error adding task:', error.message)
    throw new Error('Failed to add task')
  }
}
```

### AddTaskForm.tsx
```
'use client'
import React, { useState } from 'react'
import { addTask } from './actions'
import { useRouter } from 'next/navigation'

function AddTaskForm() {
  const [taskName, setTaskName] = useState('')
  const router = useRouter()

  async function onSubmit() {
    await addTask(taskName)
    setTaskName('')
    router.refresh()
  }

  return (
    <form action={onSubmit}>
      <input
        autoFocus
        type="text"
        name="name"
        placeholder="Enter new task"
        onChange={(e) => setTaskName(e.target.value)}
        value={taskName}
      />
      <button type="submit">Add</button>
    </form>
  )
}
export default AddTaskForm
```